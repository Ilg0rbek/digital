<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <%- include('../partials/head.ejs') %>
    <link rel="stylesheet" href="/css/prof.css" />

    <title><%= title %></title>
    <style>
      .test-main-wrapper {
        max-width: 1100px;
        margin: 2rem auto;
        background: #fff;
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0,0,0,0.08);
        padding: 2rem 2rem 2rem 2rem;
        display: flex;
        gap: 2rem;
      }
      .test-left {
        flex: 2;
        min-width: 0;
      }
      .test-right {
        flex: 1;
        min-width: 220px;
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem 1rem;
        box-shadow: 0 0 8px rgba(0,0,0,0.03);
        height: fit-content;
      }
      .cancel-btn {
        background: #fff0f0;
        color: #d7263d;
        border: 1px solid #d7263d;
        border-radius: 6px;
        padding: 0.7rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        margin-bottom: 1.2rem;
        margin-right: 1rem;
      }
      .cancel-btn:hover {
        background: #d7263d;
        color: #fff;
      }
      .test-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
      }
      .test-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #333;
      }
      .timer {
        color: #228be6;
        font-weight: 500;
        font-size: 1.1rem;
      }
      .question-box {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
        border: 1px solid #eee;
        margin-bottom: 1.5rem;
      }
      .question-text {
        font-size: 1.1rem;
        margin-bottom: 1.2rem;
        color: #222;
      }
      .options-container {
        display: flex;
        flex-direction: column;
        gap: 0.7rem;
      }
      .option {
        background: #fff;
        border: 1px solid #dee2e6;
        border-radius: 7px;
        padding: 0.7rem 1rem;
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: background 0.2s, border 0.2s;
      }
      .option.selected {
        background: #e7f5ff;
        border-color: #228be6;
      }
      .option input[type="radio"] {
        margin-right: 1rem;
      }
      .nav-btns {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
      }
      .skip-btn {
        background: #f1f3f5;
        color: #333;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 0.7rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
      }
      .skip-btn:hover {
        background: #e9ecef;
      }
      .next-btn {
        background: #228be6;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 0.7rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
      }
      .next-btn:hover {
        background: #1c7ed6;
      }
      .question-status-title {
        font-weight: 600;
        color: #333;
        font-size: 1.1rem;
      }
      .question-status-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.5rem;
        margin-bottom: 1rem;
      }
      .q-status-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 1px solid #dee2e6;
        background: #fff;
        color: #333;
        font-weight: 500;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.2s, color 0.2s, border 0.2s;
        outline: none;
      }
      .q-status-btn.active {
        border: 2px solid #228be6;
        background: #e7f5ff;
        color: #228be6;
      }
      .q-status-btn.answered {
        background: #228be6;
        color: #fff;
        border: 2px solid #228be6;
      }
      .q-status-btn:not(.active):hover {
        background: #f1f3f5;
      }
      .legend {
        display: flex;
        gap: 1.5rem;
        align-items: center;
        margin-bottom: 0.5rem;
      }
      .legend-item {
        display: flex;
        align-items: center;
        gap: 0.4rem;
        font-size: 0.97rem;
        color: #555;
      }
      .legend-dot {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 0.3rem;
      }
      .legend-dot.answered {
        background: #228be6;
      }
      .legend-dot.unanswered {
        background: #dee2e6;
      }
      .completion-screen {
        text-align: center;
        padding: 2rem 0;
      }
      .completion-screen h2 {
        color: #228be6;
        margin-bottom: 1rem;
      }
      .completion-screen button {
        margin-top: 1.5rem;
        background: #228be6;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 0.7rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
      }
      .completion-screen button:hover {
        background: #1c7ed6;
      }
      .results-screen {
        text-align: center;
        padding: 3rem 2rem;
        background: #fff;
        border-radius: 15px;
      }
      .results-header {
        margin-bottom: 2rem;
      }
      .results-header h2 {
        color: #228be6;
        font-size: 2rem;
        margin-bottom: 1rem;
      }
      .results-header p {
        color: #666;
        font-size: 1.1rem;
      }
      .score-circle {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        margin: 0 auto 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #228be6, #1c7ed6);
        color: white;
        font-size: 3rem;
        font-weight: bold;
        box-shadow: 0 10px 20px rgba(34, 139, 230, 0.2);
      }
      .score-details {
        max-width: 400px;
        margin: 0 auto 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 10px;
      }
      .score-detail-item {
        display: flex;
        justify-content: space-between;
        padding: 0.8rem 0;
        border-bottom: 1px solid #dee2e6;
      }
      .score-detail-item:last-child {
        border-bottom: none;
      }
      .score-detail-label {
        color: #666;
      }
      .score-detail-value {
        font-weight: 600;
        color: #333;
      }
      .return-link {
        display: inline-block;
        margin-top: 2rem;
        padding: 1rem 2rem;
        background: #228be6;
        color: white;
        text-decoration: none;
        border-radius: 8px;
        transition: background 0.2s;
      }
      .return-link:hover {
        background: #1c7ed6;
        color: white;
      }
      .return-link i {
        margin-right: 0.5rem;
      }
    </style>

  </head>
  <body class="index-page layout">
    <main class="main">
      <div class="container section mt-5">
        <div class="test-main-wrapper">
          <div class="test-left">
            <div class="test-header" style="display: flex; align-items: center;">
              <div class="test-title"><%= testTitle %></div>
              <div class="btn btn-danger" onclick="cancelTest()">
                 Tark etish
              </div>
            </div>
            <form id="testForm">
              <% questions.forEach(function(question, index) { %>
                <div class="question-box" data-question-index="<%= index %>" style=<%= index === 0 ? 'display:block;' : 'display:none;' %>">
                  <div class="question-progress" style="font-weight:600;margin-bottom:10px;">
                    <%= (index+1) %>/<%= questions.length %>-savol
                  </div>
                  <div class="question-text"><%= (index + 1) + '. ' + question.text %></div>
                  <div class="options-container">
                    <% question.options.forEach(function(option, optIndex) { %>
                      <label class="option">
                        <input type="radio" name="q<%= question.id %>" value="<%= option.score %>">
                        <%= option.text %>
                      </label>
                    <% }); %>
                  </div>
                </div>
              <% }); %>
              <div class="nav-btns">
                <% if (questions.length > 1) { %>
                  <button type="button" class="skip-btn" id="prevBtn">Ortga</button>
                <% } %>
                <button type="button" class="next-btn" id="nextBtn"><%= questions.length === 1 ? 'Yakunlash' : 'Keyingi' %></button>
              </div>
            </form>
            <div id="completionScreen" class="completion-screen" style="display:none;">
              <div class="results-screen">
                <div class="results-header">
                  <h2>Test yakunlandi!</h2>
                  <p id="totalScoreText" style="font-size: 1.2rem; color: #555; margin-top: 0.5rem;"></p>
                </div>
                
                <div class="score-circle">
                  <span id="finalScore">0</span>
                </div>

                <a href="/diagnos" class="return-link">
                  <i class="bi bi-arrow-left"></i>
                  Diagnostika bo'limiga qaytish
                </a>
              </div>
            </div>
          </div>
          <div class="test-right" id="testRightSidebar">
            <div style="display: flex; align-items: center; justify-content: space-between;" class="mb-3">
              <div class="question-status-title">Questions Status</div>
              <div class="timer"><i class="bi bi-clock"></i> <span id="time">30:00</span></div>
            </div>
            <div class="question-status-grid" id="questionStatusGrid"></div>
          </div>
        </div>
      </div>
    </main>

    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center">
      <i class="bi bi-arrow-up-short"></i>
    </a>
  </body>
   <script>
      let isTestStarted = true;
      let hasUnsavedChanges = false;

      // Browser back button handler
      window.onpopstate = function(event) {
        if (isTestStarted) {
          history.pushState(null, '', window.location.href);
          if (confirm('Testni bekor qilsangiz, barcha javoblar o\'chiriladi va natijalar saqlanmaydi. Rostdan ham bekor qilmoqchimisiz?')) {
            window.location.href = '/diagnos';
          }
        }
      };

      // Page refresh/close handler
      window.onbeforeunload = function(e) {
        if (isTestStarted) {
          e.preventDefault();
          e.returnValue = 'Testni bekor qilsangiz, barcha javoblar o\'chiriladi va natijalar saqlanmaydi. Rostdan ham bekor qilmoqchimisiz?';
          return e.returnValue;
        }
      };

      // Prevent F5 and Ctrl+R
      document.addEventListener('keydown', function(e) {
        if (isTestStarted && (e.key === 'F5' || (e.ctrlKey && e.key === 'r'))) {
          e.preventDefault();
          alert('Test ishlash jarayonida sahifani yangilash mumkin emas!');
          return false;
        }
      });

      // Cancel test function
      function cancelTest() {
        if (confirm('Testni bekor qilsangiz, barcha javoblar o\'chiriladi va natijalar saqlanmaydi. Rostdan ham bekor qilmoqchimisiz?')) {
          window.location.href = '/diagnos';
        }
      }

      document.addEventListener('DOMContentLoaded', function() {
        // Add initial history state
        history.pushState(null, '', window.location.href);

        const questions = document.querySelectorAll('.question-box');
        const totalQuestions = questions.length;
        let currentQuestion = 0;
        const nextBtn = document.getElementById('nextBtn');
        const prevBtn = document.getElementById('prevBtn');
        const questionStatusGrid = document.getElementById('questionStatusGrid');
        const timerDisplay = document.getElementById('time');
        const completionScreen = document.getElementById('completionScreen');
        const testForm = document.getElementById('testForm');
        let timeLeft = 30 * 60;
        let testFinished = false;
        let answers = new Array(totalQuestions).fill(null);
        let timerInterval;

        timerInterval = setInterval(() => {
          if (testFinished) return;
          timeLeft--;
          const minutes = Math.floor(timeLeft / 60);
          const seconds = timeLeft % 60;
          timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          if (timeLeft <= 0) {
            clearInterval(timerInterval);
            submitTest();
          }
        }, 1000);

        for (let i = 0; i < totalQuestions; i++) {
          const btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'q-status-btn';
          btn.textContent = i + 1;
          btn.addEventListener('click', () => goToQuestion(i));
          questionStatusGrid.appendChild(btn);
        }

        function updateStatusGrid() {
          const btns = questionStatusGrid.querySelectorAll('.q-status-btn');
          btns.forEach((btn, idx) => {
            btn.classList.remove('active', 'answered');
            if (idx === currentQuestion) btn.classList.add('active');
            if (answers[idx] !== null) btn.classList.add('answered');
          });
        }

        function goToQuestion(idx) {
          questions[currentQuestion].style.display = 'none';
          currentQuestion = idx;
          questions[currentQuestion].style.display = 'block';
          updateStatusGrid();
          updateNavBtns();
        }

        questions.forEach((question, qIdx) => {
          const options = question.querySelectorAll('input[type="radio"]');
          options.forEach((option) => {
            option.addEventListener('change', () => {
              const questionBox = option.closest('.question-box');
              const questionIndex = parseInt(questionBox.getAttribute('data-question-index'));
              answers[questionIndex] = parseInt(option.value);

              const currentTotalScore = answers.reduce((sum, score) => {
                return sum + (score || 0);
              }, 0);
              updateStatusGrid();
            });
          });
        });

        nextBtn.addEventListener('click', () => {
          if (currentQuestion === totalQuestions - 1) {
            confirmAndSubmit();
          } else {
            goToQuestion(currentQuestion + 1);
          }
        });
        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            if (currentQuestion > 0) {
              goToQuestion(currentQuestion - 1);
            }
          });
        }

        function updateNavBtns() {
          if (totalQuestions === 1) {
            nextBtn.textContent = 'Yakunlash';
          } else {
            prevBtn.disabled = currentQuestion === 0;
            if (currentQuestion === totalQuestions - 1) {
              nextBtn.textContent = 'Yakunlash';
            } else {
              nextBtn.textContent = 'Keyingi';
            }
          }
        }

        function confirmAndSubmit() {
          const unanswered = answers.filter(a => a === null).length;
          if (unanswered > 0) {
            if (!confirm(`${unanswered} ta savol javobsiz qoldi. Rostdan tugatasizmi?`)) {
              return;
            }
          }
          submitTest();
        }

        function submitTest() {
          testFinished = true;
          clearInterval(timerInterval);
          testForm.style.display = 'none';
          document.getElementById('testRightSidebar').style.display = 'none';
          completionScreen.style.display = 'block';
          
          // Calculate total score
          const totalScore = answers.reduce((sum, score) => {
            return sum + (score || 0);
          }, 0);
          
          console.log('Answers:', answers); // Debug log
          console.log('Total Score:', totalScore); // Debug log
          
          // Update UI with results
          document.getElementById('finalScore').textContent = totalScore;
          document.getElementById('totalScoreText').textContent = 'Umumiy bal: ' + totalScore;

          // Send results to server
          fetch('/submit-test', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              testType: '<%= testType %>',
              answers: answers,
              totalScore: totalScore
            })
          })
          .catch(error => {
            console.error('Error:', error);
          });
        }

        // Initial status
        updateStatusGrid();
        updateNavBtns();
      });
    </script> 
</html>